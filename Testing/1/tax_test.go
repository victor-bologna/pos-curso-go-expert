package tax

import "testing"

// go test -coverprofile=coverage -> Get code coverage
// 	 To see html coverage profie (must use command above first) -> go tool cover -html=coverage
// go test . -> test all conditions
// go test -v -> verbose mode

func TestCalculateTax(t *testing.T) {
	amount := 500.0
	expected := 5.0

	result := CalculateTax(amount)

	if result != expected {
		t.Errorf("Expected %f but not %f", expected, result)
	}
}

func TestCalculateTaxBatch(t *testing.T) {
	type calcTax struct {
		amount, expected float64
	}

	calcTaxes := []calcTax{
		{0.0, 0.0},
		{500.0, 5.0},
		{1000.0, 5.0},
		{5000.0, 10.0},
	}

	for _, v := range calcTaxes {
		result := CalculateTax(v.amount)
		if result != v.expected {
			t.Errorf("Expected %f but not %f", v.expected, result)
		}
	}
}

/* Benchmark
* command: go test -bench=. -run=^# -count=10 -benchtime=3s -benchmem
* -bench=. -> All tests
* -run=^# -> Regular expression to ignoring other tests
* -count=10 -> execute 10 times the benchmark
* -benchtime=3s -> Execute for 3 seconds
* -benchmem -> See memory allocation
 */

func BenchmarkCalculateTax(b *testing.B) {
	for i := 0; i < b.N; i++ {
		CalculateTax(500.0)
	}
}

/* Fuzz (Automatic input generator to see if your function will crash)
* command: go test -fuzz . -fuzztime=5s -run=^#
* fuzz . -> run all fuzz tests
* fuzztime=5s -> how long it will run
* run=^# ignore other tests
* NOTE: if any other tests generated by Go doesn't work, it will create a file with input value that broke the test.
 */

func FuzzCalculateTax(f *testing.F) {
	seed := []float64{-1, -2, -2.5, 300.0, 3400.23, 1000.00, 40300.00}
	for _, amount := range seed {
		f.Add(amount)
	}
	f.Fuzz(func(t *testing.T, a float64) {
		result := CalculateTax(a)
		if a <= 0 && result != 0 {
			t.Errorf("Received %f but expected 0", result)
		}
		if a >= 20000.0 && result != 20 {
			t.Errorf("Received %f but expected 20", result)
		}
	})
}
